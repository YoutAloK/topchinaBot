#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PostgreSQL –∏ MySQL
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node setup_db.js
 */

const { Pool: PgPool } = require('pg');
const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

async function setupDatabase() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const DB_TYPE = process.env.DB_TYPE || 'postgresql';
  
  if (DB_TYPE === 'postgresql') {
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      process.exit(1);
    }
  } else if (DB_TYPE === 'mysql') {
    if (!process.env.DB_HOST || !process.env.DB_USER || !process.env.DB_PASS || !process.env.DB_NAME) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ');
      console.error('–¢—Ä–µ–±—É—é—Ç—Å—è: DB_HOST, DB_USER, DB_PASS, DB_NAME');
      process.exit(1);
    }
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ postgresql –∏–ª–∏ mysql');
    process.exit(1);
  }
  
  console.log(`üìä –¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${DB_TYPE.toUpperCase()}`);
  
  // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  let pool;
  
  if (DB_TYPE === 'postgresql') {
    pool = new PgPool({
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    });
  } else {
    pool = mysql.createPool({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASS,
      database: process.env.DB_NAME,
      port: process.env.DB_PORT || 3306,
      ssl: { rejectUnauthorized: false }
    });
  }
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    if (DB_TYPE === 'postgresql') {
      await pool.query('SELECT 1');
    } else {
      await pool.query('SELECT 1');
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
    
    if (DB_TYPE === 'postgresql') {
      // PostgreSQL —Å—Ö–µ–º–∞
      await pool.query(`
        CREATE TABLE IF NOT EXISTS orders (
          order_id SERIAL PRIMARY KEY,
          track_code VARCHAR(50) UNIQUE NOT NULL,
          status VARCHAR(20) DEFAULT 'Pending',
          delivery_date DATE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      await pool.query(`
        CREATE TABLE IF NOT EXISTS products (
          product_id SERIAL PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          image_url VARCHAR(500),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      await pool.query(`
        CREATE TABLE IF NOT EXISTS order_items (
          item_id SERIAL PRIMARY KEY,
          order_id INTEGER REFERENCES orders(order_id) ON DELETE CASCADE,
          product_id INTEGER REFERENCES products(product_id) ON DELETE CASCADE,
          quantity INTEGER NOT NULL DEFAULT 1,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await pool.query('CREATE INDEX IF NOT EXISTS idx_orders_track_code ON orders(track_code);');
      await pool.query('CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);');
      await pool.query('CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON order_items(order_id);');
      await pool.query('CREATE INDEX IF NOT EXISTS idx_order_items_product_id ON order_items(product_id);');
      
    } else {
      // MySQL —Å—Ö–µ–º–∞
      await pool.query(`
        CREATE TABLE IF NOT EXISTS orders (
          order_id INT AUTO_INCREMENT PRIMARY KEY,
          track_code VARCHAR(50) UNIQUE NOT NULL,
          status ENUM('Pending', 'Shipped', 'Delivered') NOT NULL DEFAULT 'Pending',
          delivery_date DATE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      await pool.query(`
        CREATE TABLE IF NOT EXISTS products (
          product_id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          image_url VARCHAR(500),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      await pool.query(`
        CREATE TABLE IF NOT EXISTS order_items (
          item_id INT AUTO_INCREMENT PRIMARY KEY,
          order_id INT NOT NULL,
          product_id INT NOT NULL,
          quantity INT NOT NULL,
          FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
          FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
        );
      `);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await pool.query('CREATE INDEX idx_track_code ON orders(track_code);');
      await pool.query('CREATE INDEX idx_order_id ON order_items(order_id);');
      await pool.query('CREATE INDEX idx_product_id ON order_items(product_id);');
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...');
    let tables;
    
    if (DB_TYPE === 'postgresql') {
      const result = await pool.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
      `);
      tables = result.rows;
    } else {
      const result = await pool.query('SHOW TABLES');
      tables = result[0];
    }
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tables.forEach(row => {
      const tableName = DB_TYPE === 'postgresql' ? row.table_name : Object.values(row)[0];
      console.log(`   - ${tableName}`);
    });
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    if (DB_TYPE === 'postgresql') {
      await pool.query(`
        INSERT INTO orders (track_code, status, delivery_date) VALUES 
        ('TC12345678', 'Pending', CURRENT_DATE + INTERVAL '7 days'),
        ('TC87654321', 'Shipped', CURRENT_DATE + INTERVAL '3 days')
        ON CONFLICT (track_code) DO NOTHING;
      `);
      
      await pool.query(`
        INSERT INTO products (name, description, image_url) VALUES 
        ('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 1', 'test1.jpg'),
        ('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 2', 'test2.jpg')
        ON CONFLICT DO NOTHING;
      `);
    } else {
      await pool.query(`
        INSERT IGNORE INTO orders (track_code, status, delivery_date) VALUES 
        ('TC12345678', 'Pending', DATE_ADD(CURDATE(), INTERVAL 7 DAY)),
        ('TC87654321', 'Shipped', DATE_ADD(CURDATE(), INTERVAL 3 DAY));
      `);
      
      await pool.query(`
        INSERT IGNORE INTO products (name, description, image_url) VALUES 
        ('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 1', 'test1.jpg'),
        ('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 2', 'test2.jpg');
      `);
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    let orders, products;
    
    if (DB_TYPE === 'postgresql') {
      const ordersResult = await pool.query('SELECT COUNT(*) as count FROM orders');
      const productsResult = await pool.query('SELECT COUNT(*) as count FROM products');
      orders = ordersResult.rows[0].count;
      products = productsResult.rows[0].count;
    } else {
      const ordersResult = await pool.query('SELECT COUNT(*) as count FROM orders');
      const productsResult = await pool.query('SELECT COUNT(*) as count FROM products');
      orders = ordersResult[0][0].count;
      products = productsResult[0][0].count;
    }
    
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:`);
    console.log(`   - –ó–∞–∫–∞–∑—ã: ${orders}`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã: ${products}`);
    
    console.log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: node bot.js');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupDatabase().catch(console.error);
